{"version":3,"file":"static/js/instance.57fe9119.chunk.js","mappings":"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","sources":["api/console.js","configs/config.default.js","constants/index.js","utils/request.js","views/Console/Instance/instance-card.jsx","views/Console/Instance/instance-detail-drawer.jsx","views/Console/Instance/image-detail-drawer.jsx","views/Console/Instance/index.jsx"],"sourcesContent":["import { get, post, del } from '@/utils/request';\n\nexport function createInstance(data) {\n    return post('api/v1/console/instance', data);\n}\nexport function getInstanceList() {\n    return get('api/v1/console/instance/list');\n}\nexport function getInstanceInfo() {\n    return get('api/v1/console/instance/info');\n}\nexport function operateInstance(data) {\n    return post('api/v1/console/instance/operate', data);\n}\nexport function removeInstance(params) {\n    return del('api/v1/console/instance', params);\n}\n\nexport function createTemplate(data) {\n    return post('api/v1/console/template', data);\n}\nexport function getTemplateList() {\n    return get('api/v1/console/template/list');\n}\nexport function removeTemplate(params) {\n    return del('api/v1/console/template', params);\n}\n\nexport function createModel(data) {\n    return post('api/v1/console/model', data);\n}\nexport function getModelList() {\n    return get('api/v1/console/model/list');\n}\nexport function removeModel(params) {\n    return del('api/v1/console/model', params);\n}\n\nexport function createTask(data) {\n    return post('api/v1/console/task', data);\n}\nexport function getTaskList() {\n    return get('api/v1/console/task/list');\n}\nexport function operateTask(data) {\n    return post('api/v1/console/task/operate', data);\n}\nexport function removeTask(params) {\n    return del('api/v1/console/task', params);\n}\n\nexport function createImage(data) {\n    return post('api/v1/console/image', data);\n}\nexport function getImageList() {\n    return get('api/v1/console/image/list');\n}\nexport function getImageInfo(params) {\n    return get('api/v1/console/image/info', params);\n}\nexport function removeImage(params) {\n    return del('api/v1/console/image', params);\n}\n","// const dotenv = require('dotenv');\n\n// dotenv.config();\n\nmodule.exports = process.env;\n","import {\n  NODE_ENV,\n  REACT_APP_BASE_URL_DEV,\n  REACT_APP_BASE_URL_PRO,\n} from '@/configs/config.default';\n\nconst isProduction = NODE_ENV === 'production';\n\nexport const BASE_URL = isProduction\n  ? REACT_APP_BASE_URL_PRO\n  : REACT_APP_BASE_URL_DEV;\n","import axios from 'axios';\nimport { BASE_URL } from '@/constants';\nimport { ls } from '@/utils/storage';\n\nconst instance = axios.create({\n    baseURL: `http://${BASE_URL}:3000`,\n    timeout: 30000\n});\n\ninstance.interceptors.request.use(\n    config => {\n        config.headers.token = ls.get('user')?.token ?? '';\n\n        return config;\n    },\n    err => {\n        return Promise.reject(err);\n    }\n);\n\ninstance.interceptors.response.use(\n    response => {\n        const code = response.data.code;\n\n        // permission error\n        if (code === 10001) {\n            ls.get('user') && ls.remove('user');\n            window.location.replace('/login');\n            return;\n        }\n        return response.data;\n    },\n    err => {\n        return Promise.reject(err);\n    }\n);\n\nexport function get(url, params) {\n    return instance.get(url, {\n        params\n    });\n}\n\nexport function post(url, data) {\n    return instance.post(url, data);\n}\n\nexport function put(url, data) {\n    return instance.put(url, data);\n}\n\nexport function del(url, params) {\n    return instance.delete(url, {\n        params\n    });\n}\n","import React from 'react';\nimport { Card, Badge, message } from 'antd';\nimport { CopyOutlined } from '@ant-design/icons';\n\nexport default function InstanceCard(props) {\n    const { data, onCardClick } = props;\n    const { title, description, instance_id, status, url } = data;\n\n    const [messageApi, contextHolder] = message.useMessage();\n\n    return (\n        <>\n            {contextHolder}\n            <Card\n                title={title}\n                bordered={false}\n                hoverable\n                style={{ margin: '10px 5px', height: '230px', position: 'relative', minWidth: '280px' }}\n                onClick={() => onCardClick(data)}>\n                <div>{description}</div>\n                <div>instance id:{instance_id.slice(0, 12)}</div>\n                <div style={{ position: 'absolute', left: '30px', bottom: '20px' }}>\n                    {status === 'running' ? (\n                        <div>\n                            <Badge status='success' /> <span>{status}</span>\n                        </div>\n                    ) : (\n                        <div>\n                            <Badge status='error' /> <span>{status}</span>\n                        </div>\n                    )}\n                </div>\n                <div style={{ position: 'absolute', right: '30px', bottom: '20px' }}>\n                    {url}\n                    <CopyOutlined\n                        style={{\n                            marginLeft: 5,\n                            fontSize: 16,\n                            cursor: 'pointer'\n                        }}\n                        onClick={e => {\n                            e.stopPropagation();\n                            navigator.clipboard.writeText(url);\n                            messageApi.success('copied');\n                        }}\n                    />\n                </div>\n            </Card>\n        </>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Drawer, Descriptions, Badge, Button, Select, Form, Input, message, Space } from 'antd';\nimport { createInstance, operateInstance, removeInstance } from '@/api/console';\nimport { useRequest } from '@umijs/hooks';\n\nexport default function InstanceDetailDrawer(props) {\n    const { data, open, isEdit, onClose, refreshList, imageList } = props;\n    const { title, description, instance_id, task, url, created_at } = data;\n\n    const [status, setStatus] = useState(data.status);\n\n    useEffect(() => {\n        setStatus(data.status);\n    }, [data]);\n\n    const { loading, run: operate } = useRequest(\n        async data => {\n            const res = await operateInstance(data);\n\n            return res;\n        },\n        {\n            manual: true\n        }\n    );\n\n    const [form] = Form.useForm();\n    const [messageApi, contextHolder] = message.useMessage();\n\n    const onFinish = async () => {\n        const values = form.getFieldsValue();\n\n        const res = await createInstance(values);\n\n        if (res.code === 0) {\n            messageApi.success(`instance created successfully`);\n            refreshList();\n            onClose();\n        } else {\n            messageApi.error(res.msg);\n        }\n    };\n\n    return (\n        <>\n            {contextHolder}\n            <Drawer\n                title={isEdit ? 'Create Instance' : 'Instance Detail'}\n                placement='right'\n                onClose={onClose}\n                open={open}\n                extra={\n                    !isEdit &&\n                    status === 'not exist' && (\n                        <Space>\n                            <Button\n                                danger\n                                size='small'\n                                onClick={async () => {\n                                    const res = await removeInstance({ id: instance_id });\n                                    if (res.code === 0) {\n                                        messageApi.success('removed');\n                                        refreshList();\n                                        onClose();\n                                    } else {\n                                        messageApi.error('remove failed');\n                                    }\n                                }}>\n                                Remove\n                            </Button>\n                        </Space>\n                    )\n                }>\n                {isEdit ? (\n                    <Form\n                        name='create_instance_form'\n                        style={{\n                            maxWidth: '85%'\n                        }}\n                        labelCol={{\n                            span: 8\n                        }}\n                        wrapperCol={{\n                            span: 16\n                        }}\n                        initialValues={{\n                            template: 'default',\n                            ...data\n                        }}\n                        form={form}\n                        onFinish={onFinish}\n                        onFinishFailed={errorInfo => {\n                            console.log('Failed:', errorInfo);\n                        }}\n                        autoComplete='off'>\n                        <Form.Item\n                            label='Name'\n                            name='name'\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please input name'\n                                }\n                            ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            label='Description'\n                            name='description'\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please input description'\n                                }\n                            ]}>\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item\n                            label='Image'\n                            name='image'\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please select image'\n                                }\n                            ]}>\n                            <Select\n                                options={imageList?.map(item => {\n                                    return {\n                                        value: item.repository,\n                                        label: item.repository\n                                    };\n                                })}\n                            />\n                        </Form.Item>\n\n                        <Form.Item label='URL' name='url'>\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item\n                            wrapperCol={{\n                                offset: 8,\n                                span: 16\n                            }}>\n                            <Button type='primary' htmlType='submit'>\n                                Submit\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                ) : (\n                    <Descriptions title={title} column={1}>\n                        <Descriptions.Item label='Description'> {description}</Descriptions.Item>\n                        <Descriptions.Item label='Instance ID:'>{instance_id}</Descriptions.Item>\n                        <Descriptions.Item label='Task'>{task}</Descriptions.Item>\n                        <Descriptions.Item label='URL'>{url}</Descriptions.Item>\n                        <Descriptions.Item label='Status'>\n                            {status === 'running' ? (\n                                <div>\n                                    <Badge status='success' /> <span>{status}</span>{' '}\n                                    <Button\n                                        danger\n                                        loading={loading}\n                                        onClick={async () => {\n                                            const res = await operate({ instance_id, operation: 'stop' });\n                                            if (res.code === 0) {\n                                                setStatus('exited');\n                                                refreshList();\n                                            }\n                                        }}\n                                        size='small'\n                                        style={{ marginLeft: '30px' }}>\n                                        stop\n                                    </Button>\n                                </div>\n                            ) : status === 'exited' ? (\n                                <div>\n                                    <Badge status='error' /> <span>{status}</span>\n                                    <Button\n                                        type='primary'\n                                        loading={loading}\n                                        onClick={async () => {\n                                            const res = await operate({ instance_id, operation: 'start' });\n                                            if (res.code === 0) {\n                                                setStatus('running');\n                                                refreshList();\n                                            }\n                                        }}\n                                        size='small'\n                                        style={{ marginLeft: '30px' }}>\n                                        start\n                                    </Button>\n                                    <Button\n                                        danger\n                                        loading={loading}\n                                        onClick={async () => {\n                                            const res = await operate({ instance_id, operation: 'remove' });\n                                            if (res.code === 0) {\n                                                setStatus('not exist');\n                                                refreshList();\n                                            }\n                                        }}\n                                        size='small'\n                                        style={{ marginLeft: '10px' }}>\n                                        remove\n                                    </Button>\n                                </div>\n                            ) : (\n                                <div>\n                                    <Badge status='error' /> <span>{status}</span>\n                                </div>\n                            )}\n                        </Descriptions.Item>\n                        <Descriptions.Item label='created at'>{new Date(created_at).toString()}</Descriptions.Item>\n                    </Descriptions>\n                )}\n            </Drawer>\n        </>\n    );\n}\n","import React from 'react';\nimport { Drawer, Descriptions, Button, Select, Form, Input, message } from 'antd';\nimport { getTaskList, createImage } from '@/api/console';\nimport { useRequest } from '@umijs/hooks';\n\nexport default function ImageDetailDrawer(props) {\n    const { data, open, isEdit, onClose, refreshList, showBuildingAlert } = props;\n    const { repository, size, created_at, tag, image_id } = data;\n\n    const { data: taskList, loading } = useRequest(async () => {\n        const res = await getTaskList();\n\n        return res.data?.list || [];\n    });\n\n    const [form] = Form.useForm();\n    const [messageApi, contextHolder] = message.useMessage();\n\n    const onFinish = async () => {\n        const values = form.getFieldsValue();\n\n        const res = await createImage(values);\n\n        if (res.code === 0) {\n            messageApi.success(res.msg);\n            refreshList();\n            onClose();\n\n            showBuildingAlert(values.repository);\n        } else {\n            messageApi.error(res.msg);\n        }\n    };\n\n    return (\n        <>\n            {contextHolder}\n            <Drawer title={isEdit ? 'Create Image' : 'Image Detail'} placement='right' onClose={onClose} open={open}>\n                {isEdit ? (\n                    <Form\n                        name='create_image_form'\n                        style={{\n                            maxWidth: '85%'\n                        }}\n                        labelCol={{\n                            span: 8\n                        }}\n                        wrapperCol={{\n                            span: 16\n                        }}\n                        initialValues={{\n                            tag: 'latest',\n                            ...data\n                        }}\n                        form={form}\n                        onFinish={onFinish}\n                        onFinishFailed={errorInfo => {\n                            console.log('Failed:', errorInfo);\n                        }}\n                        autoComplete='off'>\n                        <Form.Item\n                            label='Repository'\n                            name='repository'\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please input repository'\n                                }\n                            ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            label='Task'\n                            name='task'\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please select task'\n                                }\n                            ]}>\n                            <Select\n                                options={taskList?.map(item => {\n                                    return {\n                                        value: item.name,\n                                        label: item.name\n                                    };\n                                })}\n                            />\n                        </Form.Item>\n                        <Form.Item\n                            label='Tag'\n                            name='tag'\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please input tag'\n                                }\n                            ]}>\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item\n                            wrapperCol={{\n                                offset: 8,\n                                span: 16\n                            }}>\n                            <Button type='primary' htmlType='submit' loading={loading}>\n                                Submit\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                ) : (\n                    <Descriptions title={repository} column={1}>\n                        <Descriptions.Item label='Repository'> {repository}</Descriptions.Item>\n                        <Descriptions.Item label='Tag'>{tag}</Descriptions.Item>\n                        <Descriptions.Item label='Image ID'>{image_id}</Descriptions.Item>\n                        <Descriptions.Item label='Size'>\n                            {size ? (size / (1000 * 1000)).toFixed(2) + 'MB' : ''}\n                        </Descriptions.Item>\n                        <Descriptions.Item label='created at'>{new Date(created_at).toString()}</Descriptions.Item>\n                    </Descriptions>\n                )}\n            </Drawer>\n        </>\n    );\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Col, Row, Button, Tabs, Table, Empty, Alert } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport InstanceCard from './instance-card';\nimport InstanceDetailDrawer from './instance-detail-drawer';\nimport { getInstanceList, getImageList, getImageInfo } from '@/api/console';\nimport { useRequest } from '@umijs/hooks';\nimport { useTranslation } from 'react-i18next';\nimport ImageDetailDrawer from './image-detail-drawer';\n\nexport default function Console() {\n    const { t } = useTranslation();\n\n    const [instanceDetailDrawerOpen, setInstanceDetailDrawOpen] = useState(false);\n    const [imageDetailDrawerOpen, setImageDetailDrawOpen] = useState(false);\n\n    const [currentCardData, setCurrentCardData] = useState({});\n    const [currentImageData, setCurrentImageData] = useState({});\n\n    const [isEditInstanceDrawer, setIsEditInstanceDrawer] = useState(false);\n    const [isEditImageDrawer, setIsEditImageDrawer] = useState(false);\n\n    const [showBuildingAlert, setShowBuildingAlert] = useState(false);\n\n    const [currentTab, setCurrentTab] = useState(false);\n\n    let timer = useRef(null);\n\n    const clearTimer = () => {\n        clearInterval(timer);\n    };\n\n    const onCardClick = data => {\n        setIsEditInstanceDrawer(false);\n        setInstanceDetailDrawOpen(true);\n        setCurrentCardData(data);\n    };\n\n    const { data: instanceList, refresh: refreshInstanceList } = useRequest(async () => {\n        const res = await getInstanceList();\n\n        return res.data?.list?.reverse() || [];\n    });\n\n    const { data: imageList, refresh: refreshImageList, run: runImageList } = useRequest(async () => {\n        const res = await getImageList();\n\n        return res.data?.list?.reverse() || [];\n    });\n\n    useEffect(() => {\n        runImageList();\n    }, [currentTab]);\n\n    const columns = [\n        {\n            title: t('Repository'),\n            dataIndex: 'repository',\n            key: 'repository'\n        },\n        {\n            title: t('Tag'),\n            dataIndex: 'tag',\n            key: 'tag',\n            render: value => {\n                return value.length > 250 ? value.slice(1, 250) + '...' : value;\n            }\n        },\n        {\n            title: t('Status'),\n            dataIndex: 'status',\n            key: 'status'\n        },\n        {\n            title: t('Image ID'),\n            dataIndex: 'image_id',\n            key: 'image_id',\n            render(rol) {\n                return rol ? rol.slice(0, 20) : '';\n            }\n        },\n        {\n            title: t('Size'),\n            dataIndex: 'size',\n            key: 'size',\n            render(rol) {\n                return rol ? (rol / (1000 * 1000)).toFixed(2) + 'MB' : '';\n            }\n        },\n        {\n            title: t('Action'),\n            render(rol) {\n                return (\n                    <div>\n                        <Button\n                            type='link'\n                            onClick={() => {\n                                setIsEditImageDrawer(false);\n                                setCurrentImageData(rol);\n                                setImageDetailDrawOpen(true);\n                            }}>\n                            {t('Detail')}\n                        </Button>\n                        <Button\n                            type='text'\n                            danger\n                            disabled\n                            onClick={async () => {\n                                // const res = await removeTemplate({ id: rol.id });\n                                // if (res.code === 0) {\n                                //     messageApi.success('removed');\n                                //     refresh();\n                                // } else {\n                                //     messageApi.error('remove failed');\n                                // }\n                            }}>\n                            {t('Remove')}\n                        </Button>\n                    </div>\n                );\n            }\n        }\n    ];\n\n    const tabItems = [\n        {\n            key: 'instance',\n            label: `Instances`,\n            children: (\n                <>\n                    <Row>\n                        <Col span={2}>\n                            <Button\n                                type='primary'\n                                style={{ margin: '0 10px' }}\n                                onClick={() => {\n                                    setCurrentCardData({});\n                                    setIsEditInstanceDrawer(true);\n                                    setInstanceDetailDrawOpen(true);\n                                }}>\n                                New Instance\n                            </Button>\n                        </Col>\n                    </Row>\n                    <Row gutter={12}>\n                        {instanceList?.map((item, index) => {\n                            return (\n                                <Col span={8} key={index}>\n                                    <InstanceCard onCardClick={onCardClick} data={item} />\n                                </Col>\n                            );\n                        })}\n                    </Row>\n                    {!instanceList?.length && <Empty />}\n                </>\n            )\n        },\n        {\n            key: 'image',\n            label: `Images`,\n            children: (\n                <>\n                    <Row style={{ marginBottom: '10px' }}>\n                        <Col span={2}>\n                            <Button\n                                type='primary'\n                                style={{ margin: '0 10px' }}\n                                onClick={() => {\n                                    setCurrentImageData({});\n                                    setIsEditImageDrawer(true);\n                                    setImageDetailDrawOpen(true);\n                                }}>\n                                New Image\n                            </Button>\n                        </Col>\n                    </Row>\n                    <Table columns={columns} dataSource={imageList} pagination={{ defaultPageSize: 5 }} rowKey='id' />\n                </>\n            )\n        }\n    ];\n\n    return (\n        <div style={{ position: 'relative' }}>\n            <Tabs defaultActiveKey='1' items={tabItems} type='card' onChange={setCurrentTab} />\n            {showBuildingAlert && (\n                <Alert\n                    message='The image is being built.'\n                    type='info'\n                    showIcon\n                    icon={<LoadingOutlined />}\n                    style={{ position: 'absolute', right: 0, top: 0, width: 230 }}\n                />\n            )}\n            <InstanceDetailDrawer\n                data={currentCardData}\n                isEdit={isEditInstanceDrawer}\n                open={instanceDetailDrawerOpen}\n                imageList={imageList}\n                refreshList={refreshInstanceList}\n                onClose={() => {\n                    setCurrentCardData({});\n                    setInstanceDetailDrawOpen(false);\n                }}\n            />\n            <ImageDetailDrawer\n                data={currentImageData}\n                isEdit={isEditImageDrawer}\n                showBuildingAlert={repository => {\n                    setShowBuildingAlert(true);\n\n                    timer = setInterval(async () => {\n                        const res = await getImageInfo({ repository });\n                        if (res.code === 0 && !res.data) {\n                            refreshImageList();\n                            setShowBuildingAlert(false);\n                            clearTimer();\n                        }\n                    }, 2000);\n                }}\n                open={imageDetailDrawerOpen}\n                refreshList={refreshImageList}\n                onClose={() => {\n                    setCurrentImageData({});\n                    setImageDetailDrawOpen(false);\n                }}\n            />\n        </div>\n    );\n}\n"],"names":["createInstance","data","post","getInstanceList","get","operateInstance","removeInstance","params","del","createTemplate","getTemplateList","removeTemplate","createModel","getModelList","removeModel","createTask","getTaskList","removeTask","createImage","getImageList","getImageInfo","module","exports","process","BASE_URL","NODE_ENV","REACT_APP_BASE_URL_PRO","REACT_APP_BASE_URL_DEV","instance","axios","baseURL","concat","timeout","url","delete","interceptors","request","use","config","_ls$get$token","_ls$get","headers","token","ls","err","Promise","reject","response","code","window","location","replace","InstanceCard","props","onCardClick","title","description","instance_id","status","_message$useMessage","message","_message$useMessage2","_slicedToArray","messageApi","contextHolder","_jsxs","_Fragment","children","Card","bordered","hoverable","style","margin","height","position","minWidth","onClick","_jsx","slice","left","bottom","Badge","right","CopyOutlined","marginLeft","fontSize","cursor","e","stopPropagation","navigator","clipboard","writeText","success","InstanceDetailDrawer","open","isEdit","onClose","refreshList","imageList","task","created_at","_useState","useState","_useState2","setStatus","useEffect","_useRequest","useRequest","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_context","prev","next","sent","abrupt","stop","_x","apply","arguments","manual","loading","operate","run","_Form$useForm","Form","form","onFinish","_ref2","_callee2","values","_context2","getFieldsValue","error","msg","Drawer","placement","extra","Space","Button","danger","size","_callee3","_context3","id","name","maxWidth","labelCol","span","wrapperCol","initialValues","_objectSpread","template","onFinishFailed","errorInfo","console","log","autoComplete","label","rules","required","Input","Select","options","map","item","value","repository","offset","type","htmlType","Descriptions","column","_callee4","_context4","operation","_callee5","_context5","_callee6","_context6","Date","toString","ImageDetailDrawer","showBuildingAlert","tag","image_id","_res$data","list","taskList","toFixed","Console","t","useTranslation","instanceDetailDrawerOpen","setInstanceDetailDrawOpen","_useState3","_useState4","imageDetailDrawerOpen","setImageDetailDrawOpen","_useState5","_useState6","currentCardData","setCurrentCardData","_useState7","_useState8","currentImageData","setCurrentImageData","_useState9","_useState10","isEditInstanceDrawer","setIsEditInstanceDrawer","_useState11","_useState12","isEditImageDrawer","setIsEditImageDrawer","_useState13","_useState14","setShowBuildingAlert","_useState15","_useState16","currentTab","setCurrentTab","timer","useRef","_res$data$list","reverse","instanceList","refreshInstanceList","refresh","_useRequest2","_res$data2","_res$data2$list","refreshImageList","runImageList","columns","dataIndex","key","render","length","rol","disabled","tabItems","Row","Col","gutter","index","Empty","marginBottom","Table","dataSource","pagination","defaultPageSize","rowKey","Tabs","defaultActiveKey","items","onChange","Alert","showIcon","icon","LoadingOutlined","top","width","setInterval","clearInterval"],"sourceRoot":""}