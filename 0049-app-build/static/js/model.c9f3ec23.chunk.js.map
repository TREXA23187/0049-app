{"version":3,"file":"static/js/model.c9f3ec23.chunk.js","mappings":"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","sources":["api/console.js","api/file.js","configs/config.default.js","constants/index.js","utils/request.js","views/Console/Model/model-detail-drawer.jsx","views/Console/Model/index.jsx","views/Console/Task/task-detail-drawer.jsx","views/Console/Task/index.jsx","../node_modules/@ant-design/icons-svg/es/asn/UploadOutlined.js","../node_modules/@ant-design/icons/es/icons/UploadOutlined.js"],"sourcesContent":["import { get, post, del } from '@/utils/request';\n\nexport function createInstance(data) {\n    return post('api/v1/console/instance', data);\n}\nexport function getInstanceList() {\n    return get('api/v1/console/instance/list');\n}\nexport function getInstanceInfo() {\n    return get('api/v1/console/instance/info');\n}\nexport function operateInstance(data) {\n    return post('api/v1/console/instance/operate', data);\n}\nexport function removeInstance(params) {\n    return del('api/v1/console/instance', params);\n}\n\nexport function createTemplate(data) {\n    return post('api/v1/console/template', data);\n}\nexport function getTemplateList() {\n    return get('api/v1/console/template/list');\n}\nexport function removeTemplate(params) {\n    return del('api/v1/console/template', params);\n}\n\nexport function createModel(data) {\n    return post('api/v1/console/model', data);\n}\nexport function getModelList() {\n    return get('api/v1/console/model/list');\n}\nexport function removeModel(params) {\n    return del('api/v1/console/model', params);\n}\n\nexport function createTask(data) {\n    return post('api/v1/console/task', data);\n}\nexport function getTaskList() {\n    return get('api/v1/console/task/list');\n}\nexport function operateTask(data) {\n    return post('api/v1/console/task/operate', data);\n}\nexport function removeTask(params) {\n    return del('api/v1/console/task', params);\n}\n\nexport function createImage(data) {\n    return post('api/v1/console/image', data);\n}\nexport function getImageList() {\n    return get('api/v1/console/image/list');\n}\nexport function getImageInfo(params) {\n    return get('api/v1/console/image/info', params);\n}\nexport function removeImage(params) {\n    return del('api/v1/console/image', params);\n}\n","import { get, post, del } from '@/utils/request';\n\nexport function downloadFile(params) {\n    return get('api/v1/file/download', params);\n}\n\nexport function getFileInfo(params) {\n    return get('api/v1/file/info', params);\n}\n","// const dotenv = require('dotenv');\n\n// dotenv.config();\n\nmodule.exports = process.env;\n","import {\n  NODE_ENV,\n  REACT_APP_BASE_URL_DEV,\n  REACT_APP_BASE_URL_PRO,\n} from '@/configs/config.default';\n\nconst isProduction = NODE_ENV === 'production';\n\nexport const BASE_URL = isProduction\n  ? REACT_APP_BASE_URL_PRO\n  : REACT_APP_BASE_URL_DEV;\n","import axios from 'axios';\nimport { BASE_URL } from '@/constants';\nimport { ls } from '@/utils/storage';\n\nconst instance = axios.create({\n    baseURL: `http://${BASE_URL}:3000`,\n    timeout: 30000\n});\n\ninstance.interceptors.request.use(\n    config => {\n        config.headers.token = ls.get('user')?.token ?? '';\n\n        return config;\n    },\n    err => {\n        return Promise.reject(err);\n    }\n);\n\ninstance.interceptors.response.use(\n    response => {\n        const code = response.data.code;\n\n        // permission error\n        if (code === 10001) {\n            ls.get('user') && ls.remove('user');\n            window.location.replace('/login');\n            return;\n        }\n        return response.data;\n    },\n    err => {\n        return Promise.reject(err);\n    }\n);\n\nexport function get(url, params) {\n    return instance.get(url, {\n        params\n    });\n}\n\nexport function post(url, data) {\n    return instance.post(url, data);\n}\n\nexport function put(url, data) {\n    return instance.put(url, data);\n}\n\nexport function del(url, params) {\n    return instance.delete(url, {\n        params\n    });\n}\n","import React, { useState, useEffect } from 'react';\nimport { Drawer, Button, Switch, Form, Input, message, Upload } from 'antd';\nimport { BASE_URL } from '@/constants';\nimport { createModel } from '@/api/console';\nimport { UploadOutlined } from '@ant-design/icons';\n\nexport default function ModelDetailDrawer(props) {\n    const { data, open, isEdit, onClose, refreshList } = props;\n\n    const [fileList, setFileList] = useState([]);\n    const [showGithub, setShowGithub] = useState(false);\n\n    const [form] = Form.useForm();\n    const [messageApi, contextHolder] = message.useMessage();\n\n    useEffect(() => {\n        setShowGithub(data.is_github ?? false);\n    });\n\n    const fileUploadProps = {\n        action: `http://${BASE_URL}:3000/api/v1/file/upload?type=model`,\n        // headers: {\n        //     authorization: 'authorization-text'\n        // },\n        // beforeUpload: file => {\n        //     const isText = file.type.startsWith('text');\n        //     if (!isText) {\n        //         messageApi.error(`${file.name} is not a text file`);\n        //     }\n        //     return isText || Upload.LIST_IGNORE;\n        // },\n        onChange(info) {\n            if (info.file.status === 'done') {\n                messageApi.success(`${info.file.name} file uploaded successfully`);\n            } else if (info.file.status === 'error') {\n                messageApi.error(`${info.file.name} file upload failed.`);\n            }\n\n            let newFileList = [...info.fileList];\n\n            // 1. Limit the number of uploaded files\n            // Only to show two recent uploaded files, and old ones will be replaced by the new\n            // newFileList = newFileList.slice(-2);\n\n            // 2. Read from response and show file link\n            newFileList = newFileList.map(file => {\n                if (file.response) {\n                    // Component will show file.url as link\n                    file.url = file.response.url;\n                }\n                return file;\n            });\n            setFileList(newFileList);\n        }\n    };\n\n    const onFinish = async () => {\n        const values = {\n            ...form.getFieldsValue(),\n            is_github: showGithub\n        };\n\n        values.model_file_names =\n            values.model_file?.map(file => {\n                return file.name;\n            }) || [];\n\n        delete values.model_file;\n\n        const res = await createModel(values);\n        if (res.code === 0) {\n            messageApi.success('model created successfully');\n        } else {\n            messageApi.error(res.msg);\n        }\n        refreshList();\n        onClose();\n    };\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e;\n        }\n        return e?.fileList;\n    };\n\n    return (\n        <>\n            {contextHolder}\n            <Drawer title={isEdit ? 'Edit Model' : 'Create Model'} placement='right' onClose={onClose} open={open}>\n                <Form\n                    name='basic'\n                    style={{\n                        maxWidth: '85%'\n                    }}\n                    labelCol={{\n                        span: 8\n                    }}\n                    wrapperCol={{\n                        span: 16\n                    }}\n                    initialValues={{\n                        ...data\n                    }}\n                    form={form}\n                    onFinish={onFinish}\n                    onFinishFailed={errorInfo => {\n                        console.log('Failed:', errorInfo);\n                    }}\n                    autoComplete='off'>\n                    <Form.Item\n                        label='Name'\n                        name='name'\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input name'\n                            }\n                        ]}>\n                        <Input />\n                    </Form.Item>\n\n                    <Form.Item\n                        label='Model File'\n                        name='model_file'\n                        valuePropName='fileList'\n                        getValueFromEvent={normFile}>\n                        <Upload {...fileUploadProps}>\n                            {fileList?.length < 1 && <Button icon={<UploadOutlined />}>Click to Upload</Button>}\n                        </Upload>\n                    </Form.Item>\n\n                    <Form.Item label='Github'>\n                        <Switch onChange={setShowGithub} checked={showGithub} />\n                    </Form.Item>\n\n                    {showGithub && (\n                        <Form.Item\n                            label='Github Link'\n                            name='github_link'\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please input github link'\n                                }\n                            ]}>\n                            <Input />\n                        </Form.Item>\n                    )}\n\n                    <Form.Item\n                        wrapperCol={{\n                            offset: 8,\n                            span: 16\n                        }}>\n                        <Button type='primary' htmlType='submit'>\n                            {isEdit ? 'Update' : 'Submit'}\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Drawer>\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport { Table, Button, message, Row, Col } from 'antd';\nimport { useRequest } from '@umijs/hooks';\nimport { useTranslation } from 'react-i18next';\nimport { getModelList, removeModel } from '@/api/console';\nimport { downloadFile } from '@/api/file';\nimport ModelDetailDrawer from './model-detail-drawer';\n\nexport default function Model() {\n    const { t } = useTranslation();\n\n    const [messageApi, contextHolder] = message.useMessage();\n\n    const [drawerOpen, setDrawOpen] = useState(false);\n    const [currentModelData, setCurrentModelData] = useState({});\n    const [isEditDrawer, setIsEditDrawer] = useState(false);\n\n    const { data: modelList, refresh } = useRequest(async () => {\n        const res = await getModelList();\n\n        return res.data?.list;\n    });\n\n    const columns = [\n        {\n            title: t('Name'),\n            dataIndex: 'name',\n            key: 'name'\n        },\n        {\n            title: t('Model Flie'),\n            dataIndex: 'model_file_name',\n            key: 'model_file_name',\n            render(rol, record) {\n                return rol && !record.is_default ? (\n                    <div>\n                        <Button\n                            type='link'\n                            onClick={async () => {\n                                const { model_file_name, model_file_path } = record;\n                                const res = await downloadFile({\n                                    file_name: model_file_name,\n                                    file_path: model_file_path\n                                });\n\n                                if (res.code === -1) {\n                                    messageApi.error(res.msg);\n                                } else {\n                                    const blob = new Blob([res], {\n                                        type: 'application/octet-stream'\n                                    });\n\n                                    const link = document.createElement('a');\n\n                                    link.download = model_file_name;\n\n                                    link.href = URL.createObjectURL(blob);\n                                    document.body.appendChild(link);\n                                    link.click();\n\n                                    URL.revokeObjectURL(link.href);\n                                    document.body.removeChild(link);\n                                }\n                            }}>\n                            {rol}\n                        </Button>\n                    </div>\n                ) : (\n                    '-'\n                );\n            }\n        },\n        {\n            title: t('Github Link'),\n            dataIndex: 'github_link',\n            key: 'github_link',\n            render(rol) {\n                return rol || '-';\n            }\n        },\n        {\n            title: t('Action'),\n            render(rol, record) {\n                return (\n                    <div>\n                        <Button\n                            type='link'\n                            onClick={() => {\n                                setCurrentModelData(record);\n                                setDrawOpen(true);\n                                setIsEditDrawer(true);\n                            }}\n                            disabled={record.is_default}>\n                            {t('Edit')}\n                        </Button>\n                        <Button\n                            type='text'\n                            danger\n                            onClick={async () => {\n                                const res = await removeModel({ id: rol.id });\n                                if (res.code === 0) {\n                                    messageApi.success(res.msg);\n                                    refresh();\n                                } else {\n                                    messageApi.error(res.msg);\n                                }\n                            }}\n                            disabled={record.is_default}>\n                            {t('Remove')}\n                        </Button>\n                    </div>\n                );\n            }\n        }\n    ];\n\n    return (\n        <div>\n            {contextHolder}\n            <Row style={{ marginBottom: '10px' }}>\n                <Col span={2}>\n                    <Button\n                        type='primary'\n                        style={{ margin: '0 10px' }}\n                        onClick={() => {\n                            setIsEditDrawer(false);\n                            setDrawOpen(true);\n                        }}>\n                        New Model\n                    </Button>\n                </Col>\n            </Row>\n            <Table columns={columns} dataSource={modelList} pagination={{ defaultPageSize: 5 }} rowKey='id' />\n            <ModelDetailDrawer\n                data={currentModelData}\n                open={drawerOpen}\n                isEdit={isEditDrawer}\n                refreshList={refresh}\n                onClose={() => {\n                    setCurrentModelData({});\n                    setDrawOpen(false);\n                }}\n            />\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Drawer, Button, Form, Input, message, Select, Upload, Divider, Descriptions, Badge, Tag } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { BASE_URL } from '@/constants';\nimport { createTask, getTemplateList, getModelList } from '@/api/console';\nimport { getFileInfo } from '@/api/file';\nimport { useRequest } from '@umijs/hooks';\nimport { downloadFile } from '@/api/file';\n\nexport default function TaskDetailDrawer(props) {\n    const { data, open, isEdit, onClose, refreshList } = props;\n    const { name, model, status, created_at, type, data_file_name, data_file_path } = data;\n\n    const [taskType, setTaskType] = useState();\n    const [fileCols, setFileCols] = useState([]);\n    const [currentFilePath, setCurrentFilePath] = useState('');\n\n    const [fileList, setFileList] = useState([]);\n\n    const [form] = Form.useForm();\n    const [messageApi, contextHolder] = message.useMessage();\n\n    const { data: templateList } = useRequest(async data => {\n        const res = await getTemplateList();\n\n        return res.data?.list || [];\n    });\n\n    const { data: modelList } = useRequest(async () => {\n        const res = await getModelList();\n\n        return res.data?.list || [];\n    });\n\n    const { run: getFileColumns } = useRequest(\n        async file_path => {\n            const res = await getFileInfo({ file_path });\n\n            return res.data || [];\n        },\n        {\n            manual: true\n        }\n    );\n\n    useEffect(() => {\n        (async () => {\n            const cols = await getFileColumns(currentFilePath);\n\n            setFileCols(cols || []);\n        })();\n    }, [currentFilePath]);\n\n    const fileUploadProps = {\n        action: `http://${BASE_URL}:3000/api/v1/file/upload?type=data`,\n        headers: {\n            authorization: 'authorization-text'\n        },\n        beforeUpload: file => {\n            const isCSV = file.type === 'text/csv';\n            if (!isCSV) {\n                messageApi.error(`${file.name} is not a text file`);\n            }\n            return isCSV || Upload.LIST_IGNORE;\n        },\n        onChange(info) {\n            if (info.file.status === 'done') {\n                messageApi.success(`${info.file.name} file uploaded successfully`);\n            } else if (info.file.status === 'error') {\n                messageApi.error(`${info.file.name} file upload failed.`);\n            }\n\n            let newFileList = [...info.fileList];\n\n            // 1. Limit the number of uploaded files\n            // Only to show two recent uploaded files, and old ones will be replaced by the new\n            // newFileList = newFileList.slice(-2);\n\n            // 2. Read from response and show file link\n            newFileList = newFileList.map(file => {\n                if (file.response) {\n                    // Component will show file.url as link\n                    setCurrentFilePath(file.response?.data?.file_path);\n                    file.url = file.response.url;\n                }\n                return file;\n            });\n            setFileList(newFileList);\n        }\n    };\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e;\n        }\n        return e?.fileList;\n    };\n\n    const onFinish = async () => {\n        const values = form.getFieldsValue();\n        values.data_file_names =\n            values.data_file?.map(file => {\n                return file.name;\n            }) || [];\n\n        delete values.data_file;\n\n        const res = await createTask(values);\n\n        if (res.code === 0) {\n            messageApi.success('task created successfully');\n            refreshList();\n            onClose();\n        } else {\n            messageApi.error(res.msg);\n        }\n    };\n\n    return (\n        <>\n            {contextHolder}\n            <Drawer title={isEdit ? 'Create Task' : 'Task Detail'} placement='right' onClose={onClose} open={open}>\n                {isEdit ? (\n                    <Form\n                        name='basic'\n                        style={{\n                            maxWidth: '85%'\n                        }}\n                        labelCol={{\n                            span: 8\n                        }}\n                        wrapperCol={{\n                            span: 16\n                        }}\n                        initialValues={{\n                            ...data\n                        }}\n                        form={form}\n                        onFinish={onFinish}\n                        onFinishFailed={errorInfo => {\n                            console.log('Failed:', errorInfo);\n                        }}\n                        autoComplete='off'>\n                        <Form.Item\n                            label='Name'\n                            name='name'\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please input name'\n                                }\n                            ]}>\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item\n                            label='Type'\n                            name='type'\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please choose task type'\n                                }\n                            ]}>\n                            <Select\n                                style={{\n                                    width: 190\n                                }}\n                                options={[\n                                    {\n                                        value: 'training',\n                                        label: 'Training Task'\n                                    },\n                                    {\n                                        value: 'deployment',\n                                        label: 'Deployment Task'\n                                    }\n                                ]}\n                                onChange={setTaskType}\n                            />\n                        </Form.Item>\n\n                        {taskType === 'training' && (\n                            <>\n                                <Divider orientation='left' orientationMargin='0' plain>\n                                    Training Attributes\n                                </Divider>\n\n                                <Form.Item\n                                    label='Model'\n                                    name='model'\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: 'Please choose a model'\n                                        }\n                                    ]}>\n                                    <Select\n                                        options={modelList.map(item => {\n                                            return {\n                                                value: item.name,\n                                                label: item.name\n                                            };\n                                        })}\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label='Data File'\n                                    name='data_file'\n                                    valuePropName='fileList'\n                                    getValueFromEvent={normFile}>\n                                    <Upload {...fileUploadProps}>\n                                        {fileList?.length < 1 && (\n                                            <Button icon={<UploadOutlined />}>Click to Upload</Button>\n                                        )}\n                                    </Upload>\n                                </Form.Item>\n\n                                {fileList.length > 0 && (\n                                    <Form.Item\n                                        label='Label'\n                                        name='training_label'\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Please input training label'\n                                            }\n                                        ]}>\n                                        <Select\n                                            style={{\n                                                width: 190\n                                            }}\n                                            options={fileCols?.map(item => {\n                                                return {\n                                                    value: item,\n                                                    label: item\n                                                };\n                                            })}\n                                        />\n                                    </Form.Item>\n                                )}\n                            </>\n                        )}\n\n                        {taskType === 'deployment' && (\n                            <>\n                                <Divider orientation='left' orientationMargin='0' plain>\n                                    Deployment Attributes\n                                </Divider>\n\n                                <Form.Item\n                                    label='Template'\n                                    name='template'\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: 'Please choose a template'\n                                        }\n                                    ]}>\n                                    <Select\n                                        options={templateList.map(item => {\n                                            return {\n                                                value: item.name,\n                                                label: item.name\n                                            };\n                                        })}\n                                    />\n                                </Form.Item>\n                            </>\n                        )}\n\n                        <Form.Item\n                            wrapperCol={{\n                                offset: 8,\n                                span: 16\n                            }}>\n                            <Button type='primary' htmlType='submit'>\n                                {isEdit ? 'Update' : 'Submit'}\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                ) : (\n                    <Descriptions title={name} column={1}>\n                        <Descriptions.Item label='Type:'>\n                            <Tag color={type === 'training' ? 'green' : 'blue'}>{type}</Tag>\n                        </Descriptions.Item>\n                        <Descriptions.Item label='Status'>\n                            {status === 'running' ? (\n                                <div>\n                                    <Badge status='success' /> <span>{status}</span>{' '}\n                                </div>\n                            ) : (\n                                <div>\n                                    <Badge status='error' /> <span>{status}</span>\n                                </div>\n                            )}\n                        </Descriptions.Item>\n                        <Descriptions.Item label='Model:'>{model}</Descriptions.Item>\n                        <Descriptions.Item label='Created At'>{new Date(created_at).toString()}</Descriptions.Item>\n                        <Descriptions.Item label='Data File'>\n                            <Button\n                                type='link'\n                                size='small'\n                                onClick={async () => {\n                                    const res = await downloadFile({\n                                        file_name: data_file_name,\n                                        file_path: data_file_path\n                                    });\n\n                                    if (res.code === -1) {\n                                        messageApi.error(res.msg);\n                                    } else {\n                                        const blob = new Blob([res], {\n                                            type: 'application/octet-stream'\n                                        });\n\n                                        const link = document.createElement('a');\n\n                                        link.download = data_file_name;\n\n                                        link.href = URL.createObjectURL(blob);\n                                        document.body.appendChild(link);\n                                        link.click();\n\n                                        URL.revokeObjectURL(link.href);\n                                        document.body.removeChild(link);\n                                    }\n                                }}>\n                                {data_file_name}\n                            </Button>\n                        </Descriptions.Item>\n                    </Descriptions>\n                )}\n            </Drawer>\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport { Table, Button, message, Row, Col, Tag, Badge } from 'antd';\nimport { useRequest } from '@umijs/hooks';\nimport { useTranslation } from 'react-i18next';\nimport { getTaskList, removeTask } from '@/api/console';\nimport TaskDetailDrawer from './task-detail-drawer';\n\nexport default function Task() {\n    const { t } = useTranslation();\n\n    const [messageApi, contextHolder] = message.useMessage();\n\n    const [drawerOpen, setDrawOpen] = useState(false);\n    const [currentTaskData, setCurrentTaskData] = useState({});\n    const [isEditDrawer, setIsEditDrawer] = useState(false);\n\n    const { data: taskList, refresh } = useRequest(async () => {\n        const res = await getTaskList();\n\n        return res.data?.list || [];\n    });\n\n    const columns = [\n        {\n            title: t('Name'),\n            dataIndex: 'name',\n            key: 'name'\n        },\n        {\n            title: t('Type'),\n            dataIndex: 'type',\n            key: 'type',\n            render(rol) {\n                return <Tag color={rol === 'training' ? 'green' : 'blue'}>{rol}</Tag>;\n            }\n        },\n        {\n            title: t('Status'),\n            dataIndex: 'status',\n            key: 'status',\n            render(rol) {\n                return rol === 'running' ? (\n                    <div>\n                        <Badge status='success' /> <span>{rol}</span>\n                    </div>\n                ) : (\n                    <div>\n                        <Badge status='error' /> <span>{rol}</span>\n                    </div>\n                );\n            }\n        },\n        {\n            title: t('Action'),\n            render(rol, record) {\n                return (\n                    <div>\n                        <Button\n                            type='link'\n                            onClick={() => {\n                                setCurrentTaskData(record);\n                                setDrawOpen(true);\n                                setIsEditDrawer(false);\n                            }}>\n                            {t('Detail')}\n                        </Button>\n                        <Button\n                            type='text'\n                            danger\n                            onClick={async () => {\n                                const res = await removeTask({ id: rol.id });\n                                if (res.code === 0) {\n                                    messageApi.success(res.msg);\n                                    refresh();\n                                } else {\n                                    messageApi.error(res.msg);\n                                }\n                            }}\n                            disabled={record.is_default}>\n                            {t('Remove')}\n                        </Button>\n                    </div>\n                );\n            }\n        }\n    ];\n\n    return (\n        <div>\n            {contextHolder}\n            <Row style={{ marginBottom: '10px' }}>\n                <Col span={2}>\n                    <Button\n                        type='primary'\n                        style={{ margin: '0 10px' }}\n                        onClick={() => {\n                            setIsEditDrawer(true);\n                            setDrawOpen(true);\n                        }}>\n                        New Task\n                    </Button>\n                </Col>\n            </Row>\n            <Table columns={columns} dataSource={taskList} pagination={{ defaultPageSize: 5 }} rowKey='id' />\n            <TaskDetailDrawer\n                data={currentTaskData}\n                open={drawerOpen}\n                isEdit={isEditDrawer}\n                refreshList={refresh}\n                onClose={() => {\n                    setCurrentTaskData({});\n                    setDrawOpen(false);\n                }}\n            />\n        </div>\n    );\n}\n","// This icon file is generated automatically.\nvar UploadOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M400 317.7h73.9V656c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V317.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 163a8 8 0 00-12.6 0l-112 141.7c-4.1 5.3-.4 13 6.3 13zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"upload\", \"theme\": \"outlined\" };\nexport default UploadOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport UploadOutlinedSvg from \"@ant-design/icons-svg/es/asn/UploadOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar UploadOutlined = function UploadOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: UploadOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  UploadOutlined.displayName = 'UploadOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(UploadOutlined);"],"names":["createInstance","data","post","getInstanceList","get","operateInstance","removeInstance","params","del","createTemplate","getTemplateList","removeTemplate","createModel","getModelList","removeModel","createTask","getTaskList","removeTask","createImage","getImageList","getImageInfo","downloadFile","getFileInfo","module","exports","process","BASE_URL","NODE_ENV","REACT_APP_BASE_URL_PRO","REACT_APP_BASE_URL_DEV","instance","axios","baseURL","concat","timeout","url","delete","interceptors","request","use","config","_ls$get$token","_ls$get","headers","token","ls","err","Promise","reject","response","code","window","location","replace","ModelDetailDrawer","props","open","isEdit","onClose","refreshList","_useState","useState","_useState2","_slicedToArray","fileList","setFileList","_useState3","_useState4","showGithub","setShowGithub","_Form$useForm","Form","form","_message$useMessage","message","_message$useMessage2","messageApi","contextHolder","useEffect","_data$is_github","is_github","fileUploadProps","action","onChange","info","file","status","success","name","error","newFileList","_toConsumableArray","map","onFinish","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_values$model_file","values","res","wrap","_context","prev","next","_objectSpread","getFieldsValue","model_file_names","model_file","sent","msg","stop","apply","arguments","_jsxs","_Fragment","children","_jsx","Drawer","title","placement","style","maxWidth","labelCol","span","wrapperCol","initialValues","onFinishFailed","errorInfo","console","log","autoComplete","label","rules","required","Input","valuePropName","getValueFromEvent","e","Array","isArray","Upload","length","Button","icon","UploadOutlined","Switch","checked","offset","type","htmlType","Model","t","useTranslation","drawerOpen","setDrawOpen","currentModelData","setCurrentModelData","_useState5","_useState6","isEditDrawer","setIsEditDrawer","_useRequest","useRequest","_res$data","abrupt","list","modelList","refresh","columns","dataIndex","key","render","rol","record","is_default","onClick","_callee2","model_file_name","model_file_path","blob","link","_context2","file_name","file_path","Blob","document","createElement","download","href","URL","createObjectURL","body","appendChild","click","revokeObjectURL","removeChild","disabled","danger","_callee3","_context3","id","Row","marginBottom","Col","margin","Table","dataSource","pagination","defaultPageSize","rowKey","TaskDetailDrawer","model","created_at","data_file_name","data_file_path","taskType","setTaskType","fileCols","setFileCols","currentFilePath","setCurrentFilePath","_useState7","_useState8","_x","templateList","_res$data2","_useRequest3","_ref3","_x2","manual","getFileColumns","run","_callee4","cols","_context4","authorization","beforeUpload","isCSV","_file$response","_file$response$data","_ref5","_callee5","_values$data_file","_context5","data_file_names","data_file","Select","width","options","value","Divider","orientation","orientationMargin","plain","item","Descriptions","column","Tag","color","Badge","Date","toString","size","_callee6","_context6","Task","currentTaskData","setCurrentTaskData","taskList","ref","React","AntdIcon","_extends","UploadOutlinedSvg"],"sourceRoot":""}